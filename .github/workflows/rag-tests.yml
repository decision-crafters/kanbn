name: RAG Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of RAG test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - ollama
        - openrouter
      debug_mode:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check workspace structure
        run: |
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          find . -type f -name "*.sh" | sort

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies and link package
        run: |
          npm ci
          npm link
          # Verify kanbn is available
          which kanbn || echo "kanbn not found in PATH"
          echo "Node modules bin directory: $(npm bin -g)"
          # Add global npm bin to PATH
          echo "$(npm bin -g)" >> $GITHUB_PATH
          # Debug npm link
          echo "Checking npm link status:"
          npm ls -g --depth=0 | grep kanbn || echo "kanbn not found in global packages"
          # Debug PATH
          echo "PATH: $PATH"
          # Debug kanbn binary
          ls -la $(which kanbn 2>/dev/null) || echo "kanbn binary not found"

      - name: Setup and verify Ollama
        run: |
          # Install Ollama
          curl https://ollama.ai/install.sh | sh

          # Start Ollama service
          ollama serve &
          echo "Started Ollama service in background"

          # Wait for Ollama to be ready (up to 30 seconds)
          MAX_RETRIES=30
          RETRY_COUNT=0
          until curl -s http://localhost:11434/api/tags > /dev/null; do
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: Ollama failed to start after $MAX_RETRIES seconds"
              exit 1
            fi
            echo "Waiting for Ollama to be ready... ($(( MAX_RETRIES - RETRY_COUNT )) seconds remaining)"
            sleep 1
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          echo "✓ Ollama service is running"

          # Pull the model
          ollama pull llama2
          echo "✓ Model pulled successfully"

          # Verify model is available
          if ! ollama list | grep -q "llama2"; then
            echo "Error: llama2 model not found after pulling"
            exit 1
          fi
          echo "✓ Model verified"

      - name: Verify kanbn command before tests
        run: |
          echo "Verifying kanbn command is available..."
          which kanbn || { echo "kanbn command not found in PATH"; exit 1; }
          echo "Testing kanbn command..."
          kanbnversion || { echo "kanbn command failed to execute"; exit 1; }
          echo "kanbn command is working properly"

      - name: Prepare Ollama test script
        run: |
          # List contents of examples directory
          echo "Contents of examples directory:"
          ls -la ./examples/

          # Make sure the script is executable
          chmod +x ./examples/test_ollama_rag_integrations.sh || echo "Failed to chmod script"

          # Verify the script exists
          ls -la ./examples/test_ollama_rag_integrations.sh || echo "Script not found"

      - name: Run Ollama RAG Tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'ollama'
        env:
          KANBN_ENV: test
          DEBUG: ${{ github.event.inputs.debug_mode == 'true' || 'true' }}
          KANBN_TEST_MODE: true
          OLLAMA_HOST: http://localhost:11434
          OLLAMA_MODEL: llama2
          USE_OLLAMA: true
        run: |
          # Use absolute path to the script
          SCRIPT_PATH="$(pwd)/examples/test_ollama_rag_integrations.sh"

          # Debug script path
          echo "Script path: $SCRIPT_PATH"
          ls -la "$SCRIPT_PATH" || echo "Script not found at $SCRIPT_PATH"

          # Run the script
          bash "$SCRIPT_PATH"

      - name: Prepare OpenRouter test script
        run: |
          # List contents of examples directory
          echo "Contents of examples directory:"
          ls -la ./examples/

          # Make sure the script is executable
          chmod +x ./examples/test_openrouter_rag_integrations.sh || echo "Failed to chmod script"

          # Verify the script exists
          ls -la ./examples/test_openrouter_rag_integrations.sh || echo "Script not found"

      - name: Run OpenRouter RAG Tests
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'openrouter'
        env:
          KANBN_ENV: test
          NODE_ENV: test
          DEBUG: ${{ github.event.inputs.debug_mode == 'true' || 'true' }}
          USE_OLLAMA: false
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          if [ ! -z "${{ secrets.OPENROUTER_API_KEY }}" ]; then
            # Create test directory and setup environment
            TEST_DIR=$(mktemp -d)
            echo "Setting up OpenRouter test environment in $TEST_DIR"

            # Create .env file with necessary configuration
            echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" > $TEST_DIR/.env
            echo "KANBN_ROOT=$(pwd)" >> $TEST_DIR/.env
            echo "DEBUG=${{ github.event.inputs.debug_mode == 'true' || 'true' }}" >> $TEST_DIR/.env

            # Copy the test script to the test directory as a backup approach
            cp ./examples/test_openrouter_rag_integrations.sh $TEST_DIR/
            chmod +x $TEST_DIR/test_openrouter_rag_integrations.sh

            # Run the test with proper environment setup
            # Use absolute path to the script
            REPO_ROOT=$(pwd)
            SCRIPT_PATH="$REPO_ROOT/examples/test_openrouter_rag_integrations.sh"

            # Debug script path
            echo "Script path: $SCRIPT_PATH"
            ls -la "$SCRIPT_PATH" || echo "Script not found at $SCRIPT_PATH"

            # Change to test directory and run the script
            cd $TEST_DIR
            echo "Current directory: $(pwd)"

            # Try to run the script using the absolute path
            if [ -f "$SCRIPT_PATH" ]; then
              echo "Running script from absolute path: $SCRIPT_PATH"
              bash "$SCRIPT_PATH"
            else
              # Fallback to the local copy
              echo "Absolute path script not found, using local copy"
              bash "./test_openrouter_rag_integrations.sh"
            fi

            # Cleanup
            rm -f .env
          else
            echo "Skipping OpenRouter tests - API key not available"
          fi
