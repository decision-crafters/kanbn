name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      source: ${{ steps.changes.outputs.source }}
      tests: ${{ steps.changes.outputs.tests }}
      docs: ${{ steps.changes.outputs.docs }}
      ai: ${{ steps.changes.outputs.ai }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          source:
            - 'src/**'
            - 'index.js'
            - 'package*.json'
          tests:
            - 'test/**'
            - 'jest.config.js'
          docs:
            - 'docs/**'
            - '*.md'
            - 'examples/**'
          ai:
            - 'src/lib/ai-*.js'
            - 'src/lib/*ai*.js'
            - 'src/controller/chat*.js'
            - 'src/prompts/**'

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.source == 'true' || needs.detect-changes.outputs.tests == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate kanbn board structure
      run: |
        # Initialize test board and validate
        npm run test:jest-infrastructure

    - name: Security audit
      run: npm audit --audit-level high

    - name: Check for secrets in code
      run: |
        # Basic secret scanning
        if grep -r "api[_-]key\|secret\|password\|token" src/ --include="*.js" | grep -v "placeholder\|example\|test"; then
          echo "::warning::Potential secrets found in source code"
        fi

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality]
    if: needs.detect-changes.outputs.source == 'true' || needs.detect-changes.outputs.tests == 'true'
    strategy:
      matrix:
        node-version: [16, 18, 20]
        test-type: [unit, integration]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ${{ matrix.test-type }} tests
      run: npm run test:${{ matrix.test-type }}
      env:
        KANBN_ENV: test
        NODE_ENV: test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.test-type }}
        path: |
          coverage/
          test-results.xml
        retention-days: 7

  ai-tests:
    name: AI Feature Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality]
    if: needs.detect-changes.outputs.ai == 'true' || needs.detect-changes.outputs.source == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test AI initialization
      run: npm run test:ai-init
      env:
        KANBN_ENV: test
        USE_REAL_API: false

    - name: Test event system
      run: npm run test:events
      env:
        KANBN_ENV: test

    - name: Test chat functionality
      run: |
        # Run chat-specific tests
        npm run test -- --testPathPattern="chat|ai-service|epic"
      env:
        KANBN_ENV: test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, ai-tests]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.ai-tests.result == 'success' || needs.ai-tests.result == 'skipped')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Create distribution package
      run: |
        # Create a clean distribution
        mkdir -p dist
        cp -r src/ dist/
        cp -r bin/ dist/
        cp -r routes/ dist/
        cp index.js package.json dist/
        
        # Copy essential files
        cp README.md LICENSE dist/ 2>/dev/null || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kanbn-build
        path: dist/
        retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: kanbn-build
        path: dist/

    - name: Publish package
      run: |
        cd dist
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: kanbn-build
        path: dist/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, ai-tests, build, publish-npm, docker]
    if: always()
    steps:
    - name: Create status summary
      run: |
        echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| AI Tests | ${{ needs.ai-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| NPM Publish | ${{ needs.publish-npm.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY