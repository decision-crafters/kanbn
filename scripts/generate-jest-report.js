#!/usr/bin/env node

/**
 * Generate HTML report from Jest JSON results
 */

const fs = require('fs');
const path = require('path');

// Configuration
const jsonResultsFile = path.join(__dirname, '..', 'jest-results.json');
const htmlReportFile = path.join(__dirname, '..', 'test-report.html');

// Main function
function generateReport() {
  if (!fs.existsSync(jsonResultsFile)) {
    console.error(`Error: Results file not found: ${jsonResultsFile}`);
    console.error('Run tests with --json flag first');
    process.exit(1);
  }
  
  try {
    // Read and parse the JSON results
    const results = JSON.parse(fs.readFileSync(jsonResultsFile, 'utf8'));
    
    // Generate summary statistics
    const summary = {
      numPassedTests: results.numPassedTests,
      numFailedTests: results.numFailedTests,
      numPendingTests: results.numPendingTests,
      numTotalTests: results.numTotalTests,
      startTime: new Date(results.startTime).toLocaleString(),
      success: results.success,
      testResults: results.testResults.map(result => ({
        name: result.name,
        status: result.status,
        tests: result.assertionResults.map(assertion => ({
          title: assertion.title,
          status: assertion.status,
          failureMessages: assertion.failureMessages
        }))
      }))
    };
    
    // Generate HTML
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kanbn Test Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
    h1, h2, h3 { color: #333; }
    .summary { margin-bottom: 20px; padding: 15px; background-color: #f5f5f5; border-radius: 5px; }
    .test-file { margin-bottom: 20px; border: 1px solid #ddd; border-radius: 5px; overflow: hidden; }
    .test-file-header { padding: 10px; background-color: #f0f0f0; border-bottom: 1px solid #ddd; }
    .test-file-header.passed { background-color: #dff0d8; }
    .test-file-header.failed { background-color: #f2dede; }
    .test-list { padding: 0 15px; }
    .test-case { padding: 10px 0; border-bottom: 1px solid #eee; }
    .test-case:last-child { border-bottom: none; }
    .test-case.passed { color: #3c763d; }
    .test-case.failed { color: #a94442; }
    .test-case.pending { color: #8a6d3b; }
    .failure-message { margin-top: 10px; padding: 10px; background-color: #f2dede; border-radius: 3px; white-space: pre-wrap; font-family: monospace; font-size: 12px; }
    .timestamp { color: #777; font-size: 0.9em; margin-top: 20px; }
  </style>
</head>
<body>
  <h1>Kanbn Test Report</h1>
  
  <div class="summary">
    <h2>Summary</h2>
    <p>Run at: ${summary.startTime}</p>
    <p>Total Tests: ${summary.numTotalTests}</p>
    <p>Passed: ${summary.numPassedTests}</p>
    <p>Failed: ${summary.numFailedTests}</p>
    <p>Pending: ${summary.numPendingTests}</p>
    <p>Status: ${summary.success ? 'Success' : 'Failed'}</p>
  </div>
  
  <h2>Test Results</h2>
  
  ${summary.testResults.map(file => `
    <div class="test-file">
      <div class="test-file-header ${file.status}">
        <h3>${path.relative(path.join(__dirname, '..'), file.name)}</h3>
      </div>
      <div class="test-list">
        ${file.tests.map(test => `
          <div class="test-case ${test.status}">
            <div class="test-title">${test.title}</div>
            ${test.failureMessages && test.failureMessages.length > 0 ? `
              <div class="failure-message">${test.failureMessages.join('\n')}</div>
            ` : ''}
          </div>
        `).join('')}
      </div>
    </div>
  `).join('')}
  
  <div class="timestamp">Generated by generate-jest-report.js</div>
</body>
</html>
    `;
    
    // Write the HTML report
    fs.writeFileSync(htmlReportFile, html);
    console.log(`HTML report generated at: ${htmlReportFile}`);
    
  } catch (error) {
    console.error('Error generating report:', error.message);
    process.exit(1);
  }
}

// Run the script
generateReport();